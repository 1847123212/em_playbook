void sys_base()
{
}

void sig_notify(bool force)
{
    if (!force && !has_change)
        return;
    app_signal_renderer();
    fallback_renderer();
}

void raise(SIG)
{
    //normal logic
    if (diff && SIG_UX_LEVEL == IMMEDIATE)
    {
        sig_notify(); //user knows immediately what the dev is doing
    }
}

void sleep()
{
    raise(SLEEP, 1); //so all apps know
    sig_notify(true);

    ulp_sleep();
    HALT;
}

bool wait_for_network()
{
    if (wifi.connected)
    {
        return true; //already connected
    }
    if (RETRIES > 10)
    {
        raise(WIFI_NO_MORE_TRY);
        return false;
    }
    raise(WIFI, CONNECTING);
    wait(wifi.connect());
    if (wifi.connected)
    {
        raise(WIFI, CONNECTED);
        raise(RETRIES, 0);
        return true;
    }
    //bad
    RETRIES++;
    raise(WIFI, FAILED);
    return false;
}

bool update_system()
{
    if (!wait_for_network())
    {
        return false; //no net
    }
    //existing app_update_logic
    return true;
}

bool update_time()
{
    if (!wait_for_network())
    {
        return false; //no net
    }
    //existing app_update_logic
    return true;
}

void maintain_wifi_reconfig()
{
    raise(WIFI_PORTAL, ON);
    wifi.open_portal();
    while (1)
    {
        if (KNOB_DOWN)
        {
            wifi.stop_portal();
            break;
        }
        if(wm.process() || timeout) {
            break;
        }
        yield();
    }
    raise(WIFI_PORTAL, OFF);
    sig_notify();
    while(KNOB_DOWN);
    set_next_wake(1000); //return shortly!
    sleep();             //special sleep during bootstrap
}

void wake()
{
    sys_base();
    //special case - reconfig

    //fail safe - before any logic
    while (KNOB_DOWN)
    {
        if (millis() - pressed > 6000)
        {
            maintain_wifi_reconfig();
        }
    }

    //system integrity
    if (!TIME_OK && !update_time())
    {
        set_next_wake(???); //return shortly!
        sleep();            //special sleep during bootstrap
    }

    if (SYS_BROKEN)
    {
        update_system();
        set_next_wake(???); //return shortly!
        sleep();            //special sleep during bootstrap
    }

    //normal wake sequence
    if (REASON == TIMER)
    {
        if (SYS_EXPIRED)
        {
            update_system();
        }
        //no ui/ux just update & done
        if (APP_REFRESH_TIME > 0 && cur_time > APP_REFRESH_TIME)
        {
            //APP REFRESH REQUIRED
            app_refresh_renderer();
        }
    }
    else if (REASON == USER)
    {
        load_inputs();
        while (1)
        {
            //render loop
            sig_notify();
            if (load_inputs())
            {
                set_next_sleep(millis() + 500);
            }

            if (sleep_ready)
            {
                break;
            }
        }
    }
    compute_next_wake();
    sleep();
}